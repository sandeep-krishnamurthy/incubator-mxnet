
Gluon Package
*************

Warning: This package is currently experimental and may change in the near
  future.


Overview
========

Gluon is a high-level interface for Deep Learning frameworks like
MXNet designed to be easy to use while keeping most of the flexibility
of low level API. Gluon supports both imperative and symbolic
programming, making it easy to train complex models imperatively in
Python and then deploy with symbolic graph in C++ and Scala.

* `Autograd Package <autograd.rst>`_
* `Gluon Neural Network Layers <nn.rst>`_
* `Gluon Recurrent Neural Network API <rnn.rst>`_
* `Gluon Loss API <loss.rst>`_
* `Gluon Data API <data.rst>`_
* `NDArray API <ndarray.rst>`_
* `Sparse NDArray API <sparse.rst>`_
* `Gluon Model Zoo <model_zoo.rst>`_
* `Gluon Contrib API <contrib.rst>`_

Autograd
========

+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `record                                        | Returns an autograd recording scope context to be used in 'with' statement and captures    |
| <autograd.rst#mxnet.autograd.record>`_         | code that needs gradients to be calculated.                                                |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `pause                                         | Returns a scope context to be used in 'with' statement for codes that do not need          |
| <autograd.rst#mxnet.autograd.pause>`_          | gradients to be calculated.                                                                |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `train_mode                                    | Returns a scope context to be used in 'with' statement in which forward pass behavior is   |
| <autograd.rst#mxnet.autograd.train_mode>`_     | set to training mode, without changing the recording states.                               |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `predict_mode                                  | Returns a scope context to be used in 'with' statement in which forward pass behavior is   |
| <autograd.rst#mxnet.autograd.predict_mode>`_   | set to inference mode, without changing the recording states.                              |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `backward                                      | Compute the gradients of heads w.r.t previously marked variables.                          |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `set_training                                  | Set status to training/predicting.                                                         |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `is_training                                   | Get status on training/predicting.                                                         |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `set_recording                                 | Set status to recording/not recording.                                                     |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `is_recording                                  | Get status on recording/not recording.                                                     |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `mark_variables                                | Mark NDArrays as variables to compute gradient for autograd.                               |
+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `Function                                      | User-defined differentiable function.                                                      |
+------------------------------------------------+--------------------------------------------------------------------------------------------+


Containers
==========

+-----------------+--------------------------------------------------------------------------------------------+
| ``Block``       | Base class for all neural network layers and models.                                       |
+-----------------+--------------------------------------------------------------------------------------------+
| ``HybridBlock`` | *HybridBlock* supports forwarding with both Symbol and NDArray.                            |
+-----------------+--------------------------------------------------------------------------------------------+
| ``SymbolBlock`` | Construct block from symbol.                                                               |
+-----------------+--------------------------------------------------------------------------------------------+


Data
====

+-------------------------------------------------+--------------------------------------------------------------------------------------------+
| `Dataset                                        | Abstract dataset class.                                                                    |
+-------------------------------------------------+--------------------------------------------------------------------------------------------+
| `ArrayDataset                                   | A dataset with a data array and a label array.                                             |
+-------------------------------------------------+--------------------------------------------------------------------------------------------+
| `RecordFileDataset                              | A dataset wrapping over a RecordIO (.rec) file.                                            |
+-------------------------------------------------+--------------------------------------------------------------------------------------------+

+-------------------------------------------------+--------------------------------------------------------------------------------------------+
| `Sampler                                        | Base class for samplers.                                                                   |
+-------------------------------------------------+--------------------------------------------------------------------------------------------+
| `SequentialSampler                              | Samples elements from [0, length) sequentially.                                            |
+-------------------------------------------------+--------------------------------------------------------------------------------------------+
| `RandomSampler                                  | Samples elements from [0, length) randomly without replacement.                            |
+-------------------------------------------------+--------------------------------------------------------------------------------------------+
| `BatchSampler                                   | Wraps over another *Sampler* and return mini-batches of samples.                           |
+-------------------------------------------------+--------------------------------------------------------------------------------------------+

+------------------------------------------+--------------------------------------------------------------------------------------------+
| `DataLoader                              | Loads data from a dataset and returns mini-batches of data.                                |
+------------------------------------------+--------------------------------------------------------------------------------------------+


Vision
------

+---------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `MNIST                                                  | MNIST handwritten digits dataset from http://yann.lecun.com/exdb/mnist                     |
+---------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `FashionMNIST                                           | A dataset of Zalando's article images consisting of fashion products,                      |
+---------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `CIFAR10                                                | CIFAR10 image classification dataset from https://www.cs.toronto.edu/~kriz/cifar.html      |
+---------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `CIFAR100                                               | CIFAR100 image classification dataset from https://www.cs.toronto.edu/~kriz/cifar.html     |
+---------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `ImageRecordDataset                                     | A dataset wrapping over a RecordIO file containing images.                                 |
+---------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `ImageFolderDataset                                     | A dataset for loading image files stored in a folder structure like:                       |
+---------------------------------------------------------+--------------------------------------------------------------------------------------------+


NDArray
=======

+------------------------------------------------+--------------------------------------------------------------------------------------------+
| `mxnet.ndarray                                 | NDArray API of MXNet.                                                                      |
+------------------------------------------------+--------------------------------------------------------------------------------------------+


Sparse NDArray
--------------

+-----------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `NDArray                                                        | An array object representing a multidimensional, homogeneous array of fixed-size items.    |
+-----------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `sparse.CSRNDArray                                              | A sparse representation of 2D NDArray in the Compressed Sparse Row format.                 |
+-----------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| `sparse.RowSparseNDArray                                        | A sparse representation of a set of NDArray row slices at given indices.                   |
+-----------------------------------------------------------------+--------------------------------------------------------------------------------------------+


Neural Network API
==================

+----------------------+--------------------------------------------------------------------------------------------+
| ``Sequential``       | Stacks Blocks sequentially.                                                                |
+----------------------+--------------------------------------------------------------------------------------------+
| ``HybridSequential`` | Stacks HybridBlocks sequentially.                                                          |
+----------------------+--------------------------------------------------------------------------------------------+


Parameter
=========

+-------------------+--------------------------------------------------------------------------------------------+
+-------------------+--------------------------------------------------------------------------------------------+
+-------------------+--------------------------------------------------------------------------------------------+


Recurrent Neural Network API
============================

+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `RNNCell                                      | Elman RNN recurrent neural network cell.                                                   |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `LSTMCell                                     | Long-Short Term Memory (LSTM) network cell.                                                |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `GRUCell                                      | Gated Rectified Unit (GRU) network cell.                                                   |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `RecurrentCell                                | Abstract base class for RNN cells                                                          |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `SequentialRNNCell                            | Sequentially stacking multiple RNN cells.                                                  |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `BidirectionalCell                            | Bidirectional RNN cell.                                                                    |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `DropoutCell                                  | Applies dropout on input.                                                                  |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `ZoneoutCell                                  | Applies Zoneout on base cell.                                                              |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+
| `ResidualCell                                 | Adds residual connection as described in Wu et al, 2016                                    |
| <rnn.rst#mxnet.gluon.rnn.ResidualCell>`_      | (https://arxiv.org/abs/1609.08144).                                                        |
+-----------------------------------------------+--------------------------------------------------------------------------------------------+


Updater
=======

+-------------+--------------------------------------------------------------------------------------------+
| ``Trainer`` | Applies an *Optimizer* on a set of Parameters.                                             |
+-------------+--------------------------------------------------------------------------------------------+


Utilities
=========

+----------------------+--------------------------------------------------------------------------------------------+
| ``split_data``       | Splits an NDArray into *num_slice* slices along *batch_axis*.                              |
+----------------------+--------------------------------------------------------------------------------------------+
| ``split_and_load``   | Splits an NDArray into *len(ctx_list)* slices along *batch_axis* and loads each slice to   |
+----------------------+--------------------------------------------------------------------------------------------+
| ``clip_global_norm`` | Rescales NDArrays so that the sum of their 2-norm is smaller than *max_norm*.              |
+----------------------+--------------------------------------------------------------------------------------------+
